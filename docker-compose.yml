services:
  backend:
    container_name: django-equipment
    build:
      context: .
      dockerfile: ./docker/django/Dockerfile
    command: uv run gunicorn config.asgi:application -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8001

    restart: unless-stopped
    volumes:
      - ./backend:/usr/src/app/
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_INSTANCE_ADDRESS=minio:9000
      - SERVER_BACKEND_IP_ADDRESS={SERVER_BACKEND_IP_ADDRESS}
    networks:
      - equipment-app
    healthcheck: # полезно, чтобы nginx ждал, пока Django жив
      test: [ "CMD-SHELL", "curl -fs http://localhost:8001/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:17
    container_name: postgres-equipment
    restart: unless-stopped
    environment:
      PGDATA: "/var/lib/postgresql/data/pgdata"
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - equipment-app
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio-equipment
    ports:
      - "9000:9000"      # API MinIO
      - "9001:9001"      # Консоль управления
    #    environment:
    env_file:
      - .env
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - equipment-app
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    container_name: nginx_server
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./backend/src/staticfiles:/static:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - equipment-app

volumes:
  pg_data:
  minio_data:

networks:
  equipment-app:
    driver: bridge
