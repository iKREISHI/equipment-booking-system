import pandas as pd
from datetime import datetime
from django.db import transaction

from apps.equipments.models import (
    InventoryEquipment,
    InventoryEquipmentStatus,
    InventoryImport,
)
from apps.locations.models import Location


def run_inventory_import(imp: InventoryImport) -> None:
    imp.status = "IN_PROGRESS"
    imp.save(update_fields=["status"])

    try:
        # üîª –≥–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ‚Äî open() –≤–º–µ—Å—Ç–æ .path
        with imp.file.open("rb") as uploaded:
            df = pd.read_excel(uploaded)

        # –¥–∞–ª—å—à–µ –∫–æ–¥ –Ω–µ –º–µ–Ω—è–ª—Å—è ‚Üì‚Üì‚Üì
        mapping = {
            "–û—Å–Ω–æ–≤–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ": "name",
            "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä": "inventory_number",
            "–î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∫ —É—á–µ—Ç—É": "registration_date",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "count",
        }
        for col in mapping:
            if col not in df.columns:
                raise ValueError(f"–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ ¬´{col}¬ª.")

        location, _ = Location.objects.get_or_create(name="–¢–µ—Ö–Ω–æ–ø–∞—Ä–∫ –£–ü–ö")
        status, _ = InventoryEquipmentStatus.objects.get_or_create(name="–î–æ—Å—Ç—É–ø–Ω–æ")

        objs, duplicated, skipped = [], 0, 0
        for _, row in df.iterrows():
            raw_num = row["–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä"]
            if pd.isna(raw_num):
                skipped += 1
                continue
            inv_number = f"{int(raw_num):d}" if isinstance(raw_num, float) else str(raw_num).strip()
            if InventoryEquipment.objects.filter(inventory_number=inv_number).exists():
                duplicated += 1
                continue

            try:
                reg_date = datetime.strptime(str(row["–î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∫ —É—á–µ—Ç—É"]).strip(), "%d.%m.%Y").date()
            except ValueError:
                reg_date = datetime.today().date()

            qty = int(row.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 1) or 1)

            objs.append(
                InventoryEquipment(
                    owner=imp.created_by,
                    name=str(row["–û—Å–Ω–æ–≤–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ"]).strip(),
                    inventory_number=inv_number,
                    registration_date=reg_date,
                    status=status,
                    location=location,
                    count=qty,
                )
            )

        with transaction.atomic():
            InventoryEquipment.objects.bulk_create(objs, batch_size=500)

        imp.status = "SUCCESS"
        imp.rows_created = len(objs)
        imp.rows_duplicated = duplicated
        imp.rows_skipped = skipped
        imp.save(update_fields=["status", "rows_created", "rows_duplicated", "rows_skipped"])

    except Exception as exc:
        imp.status = "FAILED"
        imp.error = str(exc)
        imp.save(update_fields=["status", "error"])
